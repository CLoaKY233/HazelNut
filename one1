import discord
from discord.ext import commands
import asyncio
import config
from discord.ui import Button,button,View
import chat_exporter
import os
import datetime
from discord import Color as c



bot = commands.Bot(
    command_prefix="?",
    intents = discord.Intents.all(),
    status = discord.Status.dnd,
    activity = discord.Activity(type=discord.ActivityType.watching ,name =("over VITians")),
    guild = discord.Object(id = 1203342217519964170)
)




@bot.event
async def on_command_error(ctx, error):
    # Check if the error occurred in the command invocation context
    if ctx:
        # Get the channel ID where you want to send the error message
        error_channel_id = 1216093670084968488  # Replace with the desired channel ID
        async def send_error_message(channel_id, error_message):
            channel = bot.get_channel(channel_id)
            if channel:
                await channel.send(
                    embed = discord.Embed(
                        title="Error Encountered",
                        description=f"An error occurred: {error_message}",
                        color=discord.Color.red()
                        ).add_field(name="User", value=ctx.author.mention, inline=False
                        ).add_field(name="Channel", value=ctx.channel.mention, inline=False
                        )
                    )
            else:
                print(f"Channel with ID {channel_id} not found.")

        await send_error_message(error_channel_id, error)
    else:
        print(f"An error occurred outside of a command invocation: {error}")
@bot.event
async def on_command(ctx):
    channel_id = 1216397600387895297
    async def send_command_log(channel_id):
        channel = bot.get_channel(channel_id)
        if channel:
            await channel.send(
                embed=discord.Embed(
                    title="Command Invoked",
                    description=f"Command: {ctx.command}",
                    color=discord.Color.dark_teal()
                ).add_field(name="User", value=ctx.author.mention, inline=False
                ).add_field(name="Channel", value=ctx.channel.mention 
                            if not isinstance(ctx.channel,discord.DMChannel) 
                            else "Direct Messages",inline=False
                )
            )
        else:
            print(f"Channel with ID {channel_id} not found.")

    await send_command_log(channel_id)




@bot.event
async def on_ready():
    print(f"Logged in as {bot.user} (ID: {bot.user.id})")
    channel = bot.get_channel(1207734746981998614)
    hello = discord.Embed(
        title=f"Hello from {bot.user.display_name}",
        color=0x00FFFF,
        timestamp=datetime.datetime.now(),
    )
    try:
        hello.set_thumbnail(url=bot.user.avatar.url)
    except AttributeError:  
        hello.set_thumbnail(url="https://wallpaper.dog/large/10964102.jpg")
    hello.add_field(
        name="What can One/1 do!",
        value=f"{bot.user.display_name} will handle this exhibition with precision and care!",
        inline=False,
    )
    await channel.send(embed=hello)
    bot.add_view(CreateButton())
    bot.add_view(CloseButton())
    bot.add_view(TrashButton())
    bot.add_view(CreateTeamButton())
    bot.add_view(verifyButton())




class verifyButton(View):
    def __init__(self):
        super().__init__(timeout=None)

    @button(label="Verify ✅",style = discord.ButtonStyle.success ,custom_id = "verify")
    async def verify(self,interaction: discord.Interaction,button:Button):
        await interaction.response.defer(ephemeral=True)
        await interaction.user.send(
            embed=discord.Embed(
                title="Verify",
                description="Verify using the OTP we sent you through Mail!",
                color=discord.Color.blurple()
            ).set_thumbnail(url = bot.user.avatar.url)
        )
        guild = bot.get_guild(1203342217519964170)
        def check(message):
            return message.author == interaction.user and message.content == "123"
        
        try:
            message = await bot.wait_for("message", check=check, timeout=10)
            role = discord.utils.get(guild.roles, id = 1212090229444583464)
            await interaction.user.add_roles(role)
            await interaction.user.send("You have been verified and given the 'Verified' role.")
        except asyncio.TimeoutError:
            await interaction.user.send("Verification timed out. Please try again.")        
            
        await interaction.followup.send(
            embed=discord.Embed(
                title="Message sent!",
                description=f"Please check for {bot.user.display_name} in your dm!",
                color = discord.Color.green()
            ),
            ephemeral=True
        )
class CreateButton(View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @button(label="Create Ticket",style=discord.ButtonStyle.blurple, emoji="🎫",custom_id="ticketopen")
    async def ticket(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)
        category: discord.CategoryChannel = discord.utils.get(interaction.guild.categories, id=1213021742780514336)
        for ch in category.text_channels:
            if ch.topic == f"{interaction.user.id} DO NOT CHANGE THE TOPIC OF THIS CHANNEL!":
                await interaction.followup.send("You already have a ticket in {0}".format(ch.mention), ephemeral=True)
                return

        r1 : discord.Role = interaction.guild.get_role(1216053106064887980)
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            r1: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True),
            interaction.user: discord.PermissionOverwrite(read_messages = True, send_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        channel = await category.create_text_channel(
            name=str(interaction.user),
            topic=f"{interaction.user.id} DO NOT CHANGE THE TOPIC OF THIS CHANNEL!",
            overwrites=overwrites
        )
        await channel.send(
            embed=discord.Embed(
                title="Ticket Created!",
                description=f"Don't ping a staff member, they will be here soon.\n{interaction.user.mention}'s ticket",
                color = discord.Color.green()
            ),
            view = CloseButton()
        )
        await interaction.followup.send(
            embed= discord.Embed(
                description = "Created your ticket in {0}".format(channel.mention),
                color = discord.Color.blurple()
            ),
            ephemeral=True
        )
class CloseButton(View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @button(label="Close the ticket",style=discord.ButtonStyle.red,custom_id="closeticket",emoji="🔒")
    async def close(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)

        await interaction.channel.send("Closing this ticket in 3 seconds!")

        await asyncio.sleep(3)

        category: discord.CategoryChannel = discord.utils.get(interaction.guild.categories, id = 1214909385600671745)
        r1 : discord.Role = interaction.guild.get_role(1216053106064887980)
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            r1: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        await interaction.channel.edit(category=category, overwrites=overwrites)
        await interaction.channel.send(
            embed= discord.Embed(
                description="Ticket Closed!",
                color = discord.Color.red()
            ),
            view = TrashButton()
        )
        await log(interaction.channel)  
class TrashButton(View):
    def __init__(self):
        super().__init__(timeout=None)

    @button(label="Delete the ticket", style=discord.ButtonStyle.red, emoji="🚮", custom_id="trash")
    async def trash(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer()
        await interaction.channel.send("Deleting the ticket in 3 seconds")
        await asyncio.sleep(3)

        await interaction.channel.delete()    
class CreateTeamButton(View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @button(label="Create Team", style=discord.ButtonStyle.secondary, custom_id="team_create_button", emoji="🦁")

    async def team(self, interaction: discord.Interaction, button: Button):
        await interaction.response.defer(ephemeral=True)
        category: discord.CategoryChannel = discord.utils.get(interaction.guild.categories, id=1214133586232475708)
        for ch in category.text_channels:
            if ch.topic == f"{interaction.user.id}'s team, DO NOT CHANGE THE TOPIC OF THIS CHANNEL!":
                await interaction.followup.send("You already are a part of a Team => {0}".format(ch.mention), ephemeral=True)
                return

        r1 : discord.Role = interaction.guild.get_role(1216053106064887980)
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            r1: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_messages=True),
            interaction.user: discord.PermissionOverwrite(read_messages = True, send_messages=True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        channel = await category.create_text_channel(
            name=f"{interaction.user.name}'s team",
            topic=f"{interaction.user.id}'s team, DO NOT CHANGE THE TOPIC OF THIS CHANNEL!",
            overwrites=overwrites
        )
        await channel.send(
            embed=discord.Embed(
                title="Team Created!",
                description=f"IDK THE DESCRIPTION RN",
                color = discord.Color.greyple()
            )
            #view = CloseButton() -> link to invite more member's button!!!
        )
        await interaction.followup.send(
            embed= discord.Embed(
                description = "Created your Team in {0}".format(channel.mention),
                color = discord.Color.blurple()
            ),
            ephemeral=True
        )




async def log(channel: discord.TextChannel):
    directory = os.path.join(os.getcwd(), "Data", "Logs")
    if not os.path.exists(directory):
        os.makedirs(directory)
    filename = f"log_{channel.id}.txt"
    filepath = os.path.join(directory, filename)

    # Check if the log file already exists
    if os.path.exists(filepath):
        return  # Exit the function if the log file already exists

    async for message in channel.history(limit=None, oldest_first=True):
        timestamp = message.created_at.strftime('%Y-%m-%d %H:%M:%S')
        sender = message.author.name
        content = message.content
        with open(filepath, 'a', encoding='utf-8') as file:
            file.write(f"{timestamp} | {sender}: {content}\n")




@bot.command(name  = "start")
#@commands.has_permissions(administrator=True)
async def start(ctx):
    if ctx.guild is None:
        await ctx.send("This command can only be used in the Ease Exhibit server")
        return
    role = ctx.guild.get_role(1207733658237009920)
    if not role in ctx.author.roles:
        await ctx.send("You don't have the permission to use this command")
        return
    await ctx.channel.purge(limit=1)
    ticketchannel = bot.get_channel(1212442019302215700)
    await ticketchannel.purge()
    await ticketchannel.send(
        embed = discord.Embed(
            description = "press the button to create a new ticket!"
        ),
        view = CreateButton()
    )
    teamchannel = bot.get_channel(1212798572886757436)
    await teamchannel.purge()
    await teamchannel.send(
        embed=discord.Embed(
            description="click the button to create a new team!"
        ),
        view = CreateTeamButton()
    )
    verifychannel=bot.get_channel(1212094690514698331)
    await verifychannel.purge()
    await verifychannel.send(
        embed = discord.Embed(
            description="click the button below to start the verification process!"
        ),
        view = verifyButton()
    )




@bot.command(name = "restart")
async def close_bot(ctx):
    required_role_id = 1207733658237009920
    required_role = discord.utils.get(ctx.guild.roles, id=required_role_id)
    if required_role in ctx.author.roles:
        await ctx.send("Closing the bot...")
        await bot.close()
    else:
        await ctx.send("You don't have the permission to use this command")   





bot.run('MTIxNjAzODI0NTM5ODQ3ODk5OA.GDLO5b.4F4xuLh224JcJ6oOrk9Q3RslJF4QOSfy54gD78')




